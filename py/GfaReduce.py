#!/usr/bin/env python

from DOSlib.application import Application
import DOSlib.discovery as discovery
import numpy as np
from collections import OrderedDict
from gfa_reduce import gfa_red

# Modified from PlateMakerApp.py
class GfaReduce(Application):
    role = 'GFAREDUCE'
    commands = ['configure', 'get', 'set', 'gfaproc']
    defaults = {'simulate': False,
                'gfa_reduce_etc_dir': "${GFA_REDUCE_META}/",
                }

    def init(self):

        # input values
        self.gfa_images = None
        # output values
        self.gfa_data = None
        self.gfa_center = None
        self.gfa_guide = None
        self.guider_wcs = None
        
        self.loglevel('INFO')
        self.info('INITIALIZING Role %s' % self.role)

        self.instrument_dir = self.config['gfa_reduce_etc_dir']

        # Create status shared variable
        self.status_sv = self.shared_variable('STATUS')
        self.status_sv.publish(republish=True)
        self.status_sv.write('INITIALIZING')

        # OCS Messages
        self.OCSMessagesSV = self.shared_variable("MESSAGES", group="OCS")
        self.OCSMessagesSV.publish(allowMultiplePublishers=True)

        # use the discovery module to announce to the world
        if self.connected:
            self._setup_discovery(discovery.discoverable)
        self.status_sv.write('INITIALIZED')
        self.info('INITIALIZED')
        return self.SUCCESS

    def _setup_discovery(self, discoverable):
        self.info('setting up discovery')
        discoverable(role=self.role, tag='GFAREDUCE', interface=self.role)

    # PML functions (functions that can be accessed remotely)
    def configure(self, constants='DEFAULT'):
        # reset status
        if self.status_sv._value == 'INITIALIZING':
            raise RuntimeError("init function not completed yet, unable to configure")
        # reset application status
        if self.status_sv._value != 'READY':
            self.status_sv.write('CONFIGURING')
        # ...
        self.info('CONFIGURED')
        self.status_sv.write('READY')
        return self.SUCCESS

    def get(self, param, config_id=None):
        """Retrieve parameters dynamically.

        Options include:
        """
        # fix inconsistent variable names
        if param.lower() in self.getter_setter_handles:
            param = self.getter_setter_handles[param.lower()]

        if param == 'status':
            value = self.status_sv._value
        elif hasattr(self, param):
            value = getattr(self, param)
        elif param in self.config:
            value = self.config[param]
        else:
            return 'Invalid parameter for get command: %s' % param
        return value

    def set(self, *args, **params):
        """Set parameters dynamically."""
        print('set:', params)

        for k,v in params.items():
            if param in ['instrument', 'inst_name']:
                self.inst_name = value
            elif hasattr(self, param):
                setattr(self, param, value)
            else:
                return 'FAILED: Invalid parameter for set command: %s' % params

        # for param in params:
        #     value = params[param]
        # 
        #     # fix inconsistent variable names
        #     if param.lower() in self.getter_setter_handles:
        #         param = self.getter_setter_handles[param.lower()]
        # 
        #     if self.dervish_plate_maker \
        #        and hasattr(self.dervish_plate_maker, param) or param in handle_synonyms:
        #             setattr(self.dervish_plate_maker, param, value)
        #             if param in ['instrument', 'inst_name']:
        #                 self.inst_name = value
        #     elif param in ['instrument', 'inst_name']:
        #         self.inst_name = value
        #     elif hasattr(self, param):
        #         setattr(self, param, value)
        #     else:
        #         return 'FAILED: Invalid parameter for set command: %s' % params
        return self.SUCCESS

    def gfaproc(self, *args, **params):
        '''Run gfa_reduce.

        Returns:
            If successful, the string "SUCCESS"
            otherwise, a string starting with "FAILED"


        desi.py script:
        'set', 'gfa_images'
        'gfaproc'
        'get', 'gfa_data' --- written to "pmGFASV" for later...?
        'get', 'gfa_center'  = OrderedDict('ra', 'dec',' 'hexrot', 'hexrate')
        'get', 'gfa_guide'   = table of guide star locations on GFA
        'get', 'guider_wcs'  = table of CRVAL, CRPIX, etc

            
        XXXXX This isn't right, it's at the wrong level of PlateMaker wrapping.
        Docs from PlateMaker/dervish/manager.py:gfaproc:
        GFAProcResults = namedtuple('GFAProcResults', written_data['gfaproc'])
        def gfaproc(nfs_data, *args, proc_dir=None):
            Args:
                nfs_data: container for parameters generated by the
                          NextFieldSelector
                stdstars: table of standard stars
                gfa_images: the images from the GFA
                proc_dir: the directory from which to run the gfaproc script
            Returns:
                a tuple with three elments:
                   r[0] is the center correction
                   r[1] is the guide star positions
                   r[2] is tcl code for defining GFA parameters
                   r[3] is a table of GFA WCS paramaters
                   r[4] is a table of guider WCS paramaters
        and it does ~
            for d in args:
                d.save(seq_id, proc_dir, config_id=config_id)
            # exec script
            results = []
            for c in self.return_classes:
                d = c.load(seq_id, proc_dir, config_id=config_id)
                results.append(d)
            return self.return_class(*results)
        Where presumably nfs_data is a PlateMaker/obs_data.py: NFSData object
            class NFSData(ParDict):
        XXXXX

        '''
        self.info('calling gfa_reduce_gfaproc')

        #nfs_data, stdstars, gfa_images, proc_dir = args
        #res = gfa_reduce_gfaproc(nfs_data, stdstars, gfa_images, proc_dir)

        res = gfa_reduce_gfaproc(self.gfa_images)
        if res is None:
            self.error(result)
            return 'FAILED'
            
        gfa_center, gfa_guide, gfa_data, guider_wcs = res
        #('gfaproc', ('gfa_center', 'gfa_guide', 'gfa_data', 'gfa_wcs',
        #'guider_wcs')),
        # 'gfa_center': DataClass(GFACenter, OrderedDict),
        # 'gfa_guide': DataClass(GFAGuide, plain_table_class),
        # 'gfa_data': DataClass(GFAData, OrderedDict),
        # 'gfa_wcs': DataClass(GFAWCS, plain_table_class),
        # 'guider_wcs': DataClass(GuiderWCS, plain_table_class),

        self.gfa_center = gfa_center
        self.gfa_guide  = gfa_guide
        self.gfa_data   = gfa_data
        self.guider_wcs = guider_wcs

        #if result.startswith('FAILED'):
        #    self.error(result)
        #    return result
        return self.SUCCESS

    # Instance Connection Callbacks
    def about_to_connect_to_instance(self, *args, **kwargs):
        pass

    def did_connect_to_instance(self, *args, **kwargs):
        self.info('connected, setting up discovery stuff')
        discovery.reset()
        discovery.reset_discovered()
        self._setup_discovery(discovery.discoverable)

    def about_to_disconnect_from_instance(self, *args, **kwargs):
        pass

    def did_disconnect_from_instance(self, *args, **kwargs):
        self.info('disconnected, clearing discovery stuff')
        discovery.reset()
        discovery.reset_discovered()

    def main(self):
        while not self.shutdown_event.is_set():
            time.sleep(1)
        print('GfaReduce exits')


def gfa_reduce_gfaproc(gfa_images):   
            #nfs_data, stdstars, gfa_images, proc_dir):
    from astropy.io.fits import HDUList, PrimaryHDU, ImageHDU, Header

    extnames   = gfa_images.pop('ext_name')
    image_data = gfa_images.pop('data')
    ccdtemps   = gfa_images.pop('ccdtemp')
    # drop the None off the front of the image_data, ccdtemps, extnames
    extnames.pop(0)
    image_data.pop(0)
    ccdtemps.pop(0)
    
    hdus = []

    phdr = Header()
    for k,v in gfa_images.items():
        phdr[k] = v

    # HACK --
    #phdr['SKYRA']  = rcd['header']['SKYRA']
    #phdr['SKYDEC'] = rcd['header']['SKYDEC']
    phdr['TARGTRA' ] = phdr['REQRA']
    phdr['TARGTDEC'] = phdr['REQDEC']
    phdr['SKYRA' ] = phdr['REQRA']
    phdr['SKYDEC'] = phdr['REQDEC']
        
    hdus.append(PrimaryHDU(None, header=phdr))

    for extname,data,ccdtemp in zip(extnames, image_data, ccdtemps):
        hdr = Header()
        hdr['EXTNAME'] = extname
        hdr['GCCDTEMP'] = ccdtemp
        hdr['EXPTIME'] = phdr['EXPTIME']
        hdus.append(ImageHDU(data, hdr))
        print(extname)

    hdulist = HDUList(hdus)

    hdulist.writeto('mock.fits', overwrite=True)
    
    gfa_targets = None # grab from Gaia
    fm = gfa_red.acquire_field(gfa_targets=gfa_targets, exp_data=hdulist)

    if fm is None:
        return None
    #### FIXME -- hexrate??
    gfa_center = OrderedDict([('ra', fm.ra),
                              ('dec', fm.dec),
                              ('hexrot', fm.hexrot_deg),
                              ('hexrate', 0.),])
    print('gfa_center:', gfa_center)

    # Guide star positions
    gfa_guide = None
    
    # Seeing, transparency, etc
    gfa_data = None

    # Table of GFA WCS paramaters
    guider_wcs = None

    wcsvals = []
    #for hdu in hdulist:
    for hdu in hdus:
        hdr = hdu.header
        #print('Header:', hdr)
        # Strip "GUIDE" off "GUIDE2" to return 2.
        ext = hdr.get('EXTNAME')
        print('EXTNAME', ext)
        if ext is None:
            continue
        if not ext.startswith('GUIDE'):
            continue
        print('EXT', ext)
        print('Header:', hdr)
        try:
            guide_loc = int(ext[5:], 10)
            wcsvals.append(tuple([guide_loc] + [hdr[k] for k in [
                'CRVAL1', 'CRVAL2', 'CRPIX1', 'CRPIX2',
                'CD1_1', 'CD1_2', 'CD2_1', 'CD2_2']]))
        except KeyError:
            print('Failed to find WCS headers for', ext)
            import traceback
            traceback.print_exc()

    print('wcsvals:', wcsvals)
    guider_wcs = np.rec.array(wcsvals,
         dtype=[('GFA_LOC', '<i8'), ('CRVAL1', '<f8'), ('CRVAL2', '<f8'),
                ('CRPIX1', '<f8'), ('CRPIX2', '<f8'),
                ('CD1_1', '<f8'), ('CD1_2', '<f8'),
                ('CD2_1', '<f8'), ('CD2_2', '<f8')])
    print('guider_wcs:', guider_wcs)


    return gfa_center, gfa_guide, gfa_data, guider_wcs
        
def mock_test():
    import os
    import sys
    import fitsio
    from PlateMaker.obs_data import NFSData
    expnum = 73972
    datadir = 'mock/data/platemaker/test/%i/' % expnum
    step = 2
    # This doesn't work?!
    #os.environ['DESI_DIR'] = 'mock/desi'
    #os.environ['SDSS_PRODUCTS'] = 'mock/sdss-products'
    # Have to set in calling environment (for SDSS_PRODUCTS) and in
    # mock/sdss-products/eups/bin/setups.sh (for DESI_DIR)??

    # MUST setcwd before calling NFSData.load()...
    os.chdir(datadir)
    #nfs_data = NFSData.load(os.path.join(datadir, 'nfs-%i.%i.par' % (expnum, step)))
    # nfs_data = NFSData.load(expnum)
    # print('Read NFS data:', nfs_data)

    # gfa_reduce doesn't need this, I don't think
    #stdstars = None

    # From OCS/Sequences/desi.py
    step = 4
    gfafn = 'gfa-%i.%i.fits' % (expnum, step)
    F = fitsio.FITS(gfafn)
    gfahdr = F[0].read_header()

    print('Reading GFA images...')

    #gfafn = 'desi/spectro/data/20210131/00073972/guide-00073972-0000.fits.fz'
    gfafn = 'guide-00073972-0000.fits.fz'
    F = fitsio.FITS(gfafn)
    
    gfa_data = [None]
    devices = [None]
    # ambient = [None]
    # camtemp = [None]
    ccdtemp = [None]
    # coldtec= [None]

    order = 'GUIDE0 GUIDE2 GUIDE3 GUIDE5 GUIDE7 GUIDE8'.split()
    for extname in order:
        hdu = F[extname]
        data = hdu.read()
        print('  ', data.shape, data.dtype)
        gfa_data.append(data)
        devices.append(extname)
        hdr = hdu.read_header()
        # ambient.append(hdr.get('GAMBNTT', None))
        # camtemp.append(hdr.get('GCAMTEMP', None))
        ccdtemp.append(hdr.get('GCCDTEMP', None))
        # coldtec.append(hdr.get('GCOLDTEC', None))
    gfa_images = OrderedDict()

    phdr = F[0].read_header()
    hdr = F[order[0]].read_header()

    for key in 'EXPID EXPFRAME TILEID SEQID REQRA REQDEC FLAVOR'.split():
        #if key in phdr:
        #    gfa_images[key] = phdr[key]
        if key in hdr:
            gfa_images[key] = hdr[key]

    for key in 'ST MJD-OBS DATE-OBS TIME-OBS NIGHT EXPTIME OPENSHUT REQTIME'.split():
        if key in phdr:
            gfa_images[key] = phdr[key]

    #for key in phdr:
    #val = phdr[key]
    for key in gfahdr:
        val = gfahdr[key]
        if not key in gfa_images:
            gfa_images[key] = val
    
    gfa_images['data'] = gfa_data
    gfa_images['ext_name'] = devices
    # the desi.py script collects but does nothing with "ambient", "camtemp", ...
    #gfa_images['ambient'] = ambient
    #gfa_images['camtemp'] = camtemp
    gfa_images['ccdtemp'] = ccdtemp
    #gfa_images['coldtec'] = coldtec
        
    #proc_dir = datadir

    #print('gfa_images:', gfa_images)
    
    res = gfa_reduce_gfaproc(gfa_images)  #nfs_data, stdstars, gfa_images, proc_dir)


    print('Result:', res)

    
    if False:
        # Run local Pyro Nameserver
        # import threading
        # pyro = threading.Thread(target=pyro_nameserver)
        # pyro.daemon = True
        # pyro.start()
    
        # Start Logging server ?!
        #log_server()
        
        # Start SVE server ?!
        #sveserver = threading.Thread(target=sve_server)
        #sveserver.daemon = True
        #sveserver.start()
        #sve_server()
    
        print('Creating GfaReduce() app')
        sys.argv = ['GfaReduce.py',
                    '--loglocally', 'mock/log',
                    '--loglevel', 'DEBUG']
        gfared = GfaReduce()#noSVE=True)
        #gfared.role = 'GFARED'
        gfared.config['gfa_reduce_etc_dir'] = 'mock/gfa-reduce-data'
        print('init()')
        gfared.init()
        print('configure()')
        gfared.configure()
        print('set()')
        gfared.set()
        print('gfaproc()')
        res = gfared.gfaproc(nfs_data, stdstars, gfa_images, proc_dir)

def pyro_nameserver():
    from Pyro4.naming import startNSloop
    print('Starting Pyro nameserver...')
    startNSloop()

def log_server():
    from LogServer.LogServer import sve
    sve.server.main.SVE("LOGGER")
    
def sve_server():
    from SVE.SVE import SVE
    sve = SVE()
    sve.run()

    
if __name__ == '__main__':
    #GfaReduce().run()

    mock_test()
